name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  backend:
    name: Backend (Java + Maven)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api   # ajuste se seu backend não está em ./api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 25
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '25'       # use '25' se seu projeto já exige JDK 25
          cache: maven

      - name: Maven - Resolve deps (offline cache warmup)
        run: mvn -q -B -DskipTests dependency:go-offline

      - name: Maven - Build & Test
        run: mvn -q -B verify      # roda testes; troque por 'package -DskipTests' se ainda não tem testes

      - name: Publish test report (se usar surefire)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maven-test-reports
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/*.xml
          if-no-files-found: ignore

  frontend:
    name: Frontend (Node + Angular)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web   # ajuste se seu frontend não está em ./web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './web/package-lock.json'

      - name: Install deps (CI)
        run: npm ci

      - name: Lint (se tiver script)
        run: npm run lint --if-present

      - name: Unit tests (headless, se existir)
        run: npm test --if-present -- --watch=false
        # Dica: se usar Karma/ChromeHeadless, garanta que o projeto já está configurado para headless.
        # Se não tiver testes ainda, esse passo vai pular (por causa do --if-present).

      - name: Build produção
        run: npm run build -- --configuration production

      - name: Upload dist (artefato opcional)
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: ./web/dist
          if-no-files-found: ignore

  docker-build:
    name: Docker build (API + WEB)
    runs-on: ubuntu-latest
    needs: [backend, frontend]   # só tenta buildar imagens se os builds acima passaram
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build da imagem da API
      - name: Docker build API
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: es2-api:ci
          build-args: |
            MAVEN_OPTS=-DskipTests   # ajuste se seu Dockerfile roda testes
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build da imagem do WEB
      - name: Docker build WEB
        uses: docker/build-push-action@v6
        with:
          context: ./web
          file: ./web/Dockerfile
          push: false
          tags: es2-web:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
